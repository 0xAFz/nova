import sys
import requests

PORT = {{ xui_port }}
BASE_URL = f"http://localhost:{PORT}"

login_url = f"{BASE_URL}/login"
login_data = {"username": "{{ xui_username }}", "password": "{{ xui_password }}"}

session = requests.Session()
response = session.post(login_url, data=login_data)

if response.status_code != 200:
    print("Login failed!")
    sys.exit()

add_inbound_url = f"{BASE_URL}/panel/api/inbounds/add"
headers = {"Accept": "application/json"}

data = {
    "up": 0,
    "down": 0,
    "total": 0,
    "remark": "Nova",
    "enable": True,
    "expiryTime": 0,
    "listen": "",
    "port": 2087,
    "protocol": "vless",
    "settings": '{"clients": [{"id": "f4b9077d-e901-4521-af6b-db3539bb909c", "flow": "", "email": "HTTPUpgrade", "limitIp": 0, "totalGB": 0, "expiryTime": 0, "enable": true, "tgId": "", "subId": "h65rg4f6qjvm34z0", "comment": "", "reset": 0 }], "decryption": "none", "fallbacks": []}',
    "streamSettings": '{"network": "httpupgrade", "security": "tls", "externalProxy": [{"forceTls": "same", "dest": "wWw.sPeEdTesT.net", "port": 2087, "remark": ""}], "tlsSettings": {"serverName": "{{ domain }}", "minVersion": "1.2", "maxVersion": "1.3", "cipherSuites": "", "rejectUnknownSni": false, "disableSystemRoot": false, "enableSessionResumption": false, "certificates": [{"certificateFile": "/etc/letsencrypt/live/{{ domain }}/fullchain.pem", "keyFile": "/etc/letsencrypt/live/{{ domain }}/privkey.pem", "ocspStapling": 3600, "oneTimeLoading": false, "usage": "encipherment", "buildChain": false}], "alpn": ["h2", "http/1.1"], "settings": {"allowInsecure": false, "fingerprint": "firefox"}}, "httpupgradeSettings": {"acceptProxyProtocol": false, "path": "/api/v2/shop/products?ed=2048", "host": "{{ domain }}", "headers": {}}}',
    "sniffing": '{"enabled": false, "destOverride": ["http", "tls", "quic", "fakedns"], "metadataOnly": false, "routeOnly": false}',
    "allocate": '{"strategy": "always", "refresh": 5, "concurrency": 3}'
}

response = session.post(add_inbound_url, headers=headers, json=data)
print("Response: ", response.text)

