#!/usr/sbin/nft -f

flush ruleset

table inet mangle {
    chain prerouting {
        type filter hook prerouting priority mangle; policy accept;

        {% if dscp and firewall_config.udp_port_access %}udp dport { {{ firewall_config.udp_port_access | join(', ') }} } ip dscp set 0x2e{% endif %}

    }

    chain postrouting {
        type filter hook postrouting priority mangle; policy accept;

        {% if dscp and firewall_config.udp_port_access %}udp sport { {{ firewall_config.udp_port_access | join(', ') }} } ip dscp set 0x2e{% endif %}

    }
}

table inet filter {
    set TRUSTED_IPS {
        type ipv4_addr
        flags interval
        elements = { {% if firewall_config.trusted_range is defined %}{{ firewall_config.trusted_range | join(', ') }}{% endif %} }
    }

    set TCP_PORTS {
        type inet_service
        elements = { {{ sshd_config.Port | default('22') }}{% if firewall_config.tcp_port_access is defined %}, {{ firewall_config.tcp_port_access | join(', ') }}{% endif %} }
    }

    set UDP_PORTS {
        type inet_service
        elements = { {% if firewall_config.udp_port_access is defined %}{{ firewall_config.udp_port_access | join(', ') }}{% endif %} }
    }

    set NETWORK_ADAPTERS {
        type ifname
        elements = { {% if firewall_config.network_adapter_access is defined %}{{ firewall_config.network_adapter_access | join(', ') }}{% endif %} }
    }

    chain input {
        type filter hook input priority filter; policy drop;

        ct state vmap { established : accept, related : accept, invalid : drop }
        ip saddr @TRUSTED_IPS accept
        meta l4proto { icmp, icmpv6 } accept
        iifname @NETWORK_ADAPTERS accept
        tcp dport @TCP_PORTS accept
        udp dport @UDP_PORTS accept
    }

    chain forward {
        type filter hook forward priority filter; policy drop;
    }
}

table netdev filter {
    chain ingress {
        type filter hook ingress device {{ ansible_default_ipv4.interface }} priority -500; policy accept;
    }
}
